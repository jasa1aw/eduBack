import { PrismaService } from '@/prisma/prisma.service'
import { generateVerifyCode } from '@/src/constanst/index'
import { ChangeEmailConfirmDto, ChangeEmailDto, LoginDto, RegisterDto, ResetPasswordDto, UpdateProfileDto, VerifyEmailDto } from '@/src/dto/auth.dto'
import { EmailService } from '@/src/email/email.service'
import { BadRequestException, Injectable, UnauthorizedException } from '@nestjs/common'
import { JwtService } from '@nestjs/jwt'
import * as bcrypt from 'bcrypt'
import { Response } from 'express'

@Injectable()
export class AuthService {
	constructor(
		private readonly prisma: PrismaService,
		private readonly jwtService: JwtService,
		private readonly emailService: EmailService,
		// private readonly mailerService: MailerService,
	) { }

	private async validateRegistrationInput(dto: RegisterDto) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
		if (!dto.email || !dto.password || !dto.name) {
			throw new BadRequestException('–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		if (!emailRegex.test(dto.email)) {
			throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø–∞—Ä–æ–ª—è
		if (dto.password.length < 6) {
			throw new BadRequestException('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const existingUser = await this.prisma.user.findUnique({
			where: { email: dto.email },
		})
		if (existingUser) {
			throw new BadRequestException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
		}
	}

	private async validateLoginInput(dto: LoginDto) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –ø–æ–ª—è
		if (!dto.email || !dto.password) {
			throw new BadRequestException('Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
		if (!emailRegex.test(dto.email)) {
			throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email')
		}
	}

	private async createUserWithVerification(dto: RegisterDto, role: 'STUDENT' | 'TEACHER') {
		// –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
		const hashedPassword = await bcrypt.hash(dto.password, 10)

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		const verifyCode = generateVerifyCode()

		// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		const user = await this.prisma.$transaction(async (prisma) => {
			const user = await prisma.user.create({
				data: {
					email: dto.email,
					password: hashedPassword,
					name: dto.name,
					role: role,
					isVerified: false,
					verifyCode,
				},
			})
			return user
		})

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
		this.emailService.sendVerificationEmail(dto.email, verifyCode)
			.catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:', err))

		return user
	}

	async register(dto: RegisterDto) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		await this.validateRegistrationInput(dto)

		// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		await this.createUserWithVerification(dto, 'STUDENT')

		return { message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' }
	}

	async registerForTeacher(dto: RegisterDto) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		await this.validateRegistrationInput(dto)

		// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∏—Ç–µ–ª—è
		await this.createUserWithVerification(dto, 'TEACHER')

		return { message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email' }
	}

	async login(dto: LoginDto, res: Response) {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		await this.validateLoginInput(dto)

		// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await this.prisma.user.findUnique({ where: { email: dto.email } })
		if (!user) {
			throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
		const passValid = await bcrypt.compare(dto.password, user.password)
		if (!passValid) {
			throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
		if (!user.isVerified) {
			throw new UnauthorizedException('Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.')
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
		const token = this.jwtService.sign({ id: user.id, role: user.role })
		res.cookie('token', token, {
			httpOnly: true,
			secure: false,
			sameSite: 'lax',
		})

		return res.json({
			message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
			user: {
				id: user.id,
				name: user.name,
				email: user.email,
				role: user.role,
			},
		})
	}

	async logout(res: Response) {
		res.clearCookie('token')
		return { message: 'Logged out' }
	}

	async verifyEmail(dto: VerifyEmailDto) {
		const user = await this.prisma.user.findUnique({ where: { email: dto.email } })
		if (!user || user.verifyCode !== dto.code) {
			throw new BadRequestException('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
		}

		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
		await this.prisma.user.update({
			where: { id: user.id },
			data: {
				isVerified: true,
				verifyCode: null,
			},
		})

		return { message: 'Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' }
	}

	async getProfile(userId: string) {
		const user = await this.prisma.user.findUniqueOrThrow({
			where: { id: userId },
			select: {id: true, name: true, email: true, role: true },
		})
		return user
	}

	// üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (name, role)
	async updateProfile(userId: string, dto: UpdateProfileDto) {
		const { name } = dto
		return this.prisma.user.update({
			where: { id: userId },
			data: { name },
			select: { name: true, email: true },
		})
	}

	// üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
	async forgotPassword(email: string) {
		const user = await this.prisma.user.findUnique({
			where: { email },
			select: { id: true },
		})
		if (!user) throw new BadRequestException('User not found')

		const token = this.jwtService.sign(
			{ id: user.id, type: 'password_reset' },
			{ expiresIn: '1h' }
		)

		await this.emailService.sendPasswordReset(email, token)
		return { message: 'Password reset link sent ' }
	}

	// üìå –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
	async resetPassword(dto: ResetPasswordDto) {
		const { email, token, newPassword } = dto

		try {
			const payload = this.jwtService.verify(token)
			if (payload.type !== 'password_reset') {
				throw new BadRequestException('Invalid token type')
			}

			const hashedPassword = await bcrypt.hash(newPassword, 10)
			await this.prisma.user.update({
				where: { id: payload.id, email },
				data: { password: hashedPassword },
			})

			return { message: 'Password updated successfully' }
		} catch (error) {
			throw new BadRequestException('Invalid or expired token')
		}
	}

	// üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É email
	async changeEmail(userId: string, dto: ChangeEmailDto) {
		const { newEmail } = dto

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const currentUser = await this.prisma.user.findUnique({ where: { id: userId } })
		if (!currentUser) throw new BadRequestException('User not found')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏—Ç—å email –Ω–∞ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π
		if (currentUser.email === newEmail) {
			throw new BadRequestException('New email must be different from current email')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email
		const existingUser = await this.prisma.user.findUnique({ where: { email: newEmail } })
		if (existingUser) throw new BadRequestException('Email already in use')

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
		const token = this.jwtService.sign(
			{
				id: userId,
				currentEmail: currentUser.email,
				newEmail,
				type: 'email_change',
				iat: Math.floor(Date.now() / 1000)
			},
			{ expiresIn: '1h' }
		)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
		await this.emailService.sendEmailChangeVerification(newEmail, token)
		return { message: 'Verification link sent to new email' }
	}

	// üìå –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã email
	async changeEmailConfirm(dto: ChangeEmailConfirmDto) {
		const { token } = dto

		try {
			// –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
			const payload = this.jwtService.verify(token)
			if (payload.type !== 'email_change') {
				throw new BadRequestException('Invalid token type')
			}

			const newEmail = payload.newEmail

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
			const now = Math.floor(Date.now() / 1000)
			if (now - payload.iat > 3600) { // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
				throw new BadRequestException('Token has expired')
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			const user = await this.prisma.user.findUnique({ where: { id: payload.id } })
			if (!user) throw new BadRequestException('User not found')

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –≤ —Ç–æ–∫–µ–Ω–µ
			if (user.email !== payload.currentEmail) {
				throw new BadRequestException('Email verification failed')
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π email (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
			const existingUser = await this.prisma.user.findUnique({ where: { email: newEmail } })
			if (existingUser) throw new BadRequestException('Email already in use')

			// –û–±–Ω–æ–≤–ª—è–µ–º email –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
			await this.prisma.$transaction(async (prisma) => {
				await prisma.user.update({
					where: { id: payload.id },
					data: { email: newEmail },
				})
			})

			return { message: 'Email updated successfully' }
		} catch (error) {
			if (error instanceof BadRequestException) {
				throw error
			}
			throw new BadRequestException('Invalid or expired token')
		}
	}
}