import { JwtAuthGuard } from '@/src/auth/jwtAuth.guard'
import { Body, Controller, Get, Param, Post, Query, Request, UseGuards } from '@nestjs/common'
import { CreateCompetitionDto, JoinCompetitionDto } from './dto/competition.dto'
import { GameService } from './game.service'

@Controller('games')
export class GameController {
	constructor(
		private gameService: GameService
	) { }

	// =================== –û–ë–´–ß–ù–´–ï –ò–ì–†–´ ===================

	/**
	 * üë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä—ã
	 */
	@Get(':gameId/players')
	async getPlayers(@Param('gameId') gameId: string) {
		return this.gameService.getPlayers(gameId)
	}

	// =================== –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø ===================

	/**
	 * üèÜ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
	 */
	@Post('competitions')
	@UseGuards(JwtAuthGuard)
	async createCompetition(
		@Request() req,
		@Body() dto: CreateCompetitionDto
	) {
		const userId = req.user.id
		return this.gameService.createCompetition(userId, dto)
	}

	/**
	 * üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
	 */
	@Post('competitions/join')
	@UseGuards(JwtAuthGuard)
	async joinCompetition(
		@Request() req,
		@Body() dto: Omit<JoinCompetitionDto, 'userId'>
	) {
		const userId = req.user.id
		return this.gameService.joinCompetition({ ...dto, userId })
	}

	/**
	 * üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é –∫–∞–∫ –≥–æ—Å—Ç—å (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
	 */
	@Post('competitions/join-guest')
	async joinCompetitionAsGuest(@Body() dto: JoinCompetitionDto) {
		return this.gameService.joinCompetition(dto)
	}

	/**
	 * üë• –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
	 */
	@Post('competitions/:competitionId/teams/:teamId/select')
	async selectTeam(
		@Param('competitionId') competitionId: string,
		@Param('teamId') teamId: string,
		@Body('participantId') participantId: string
	) {
		return this.gameService.selectTeam(competitionId, teamId, participantId)
	}

	/**
	 * üéØ –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
	 */
	@Post('competitions/:competitionId/teams/:teamId/player')
	async selectPlayer(
		@Param('competitionId') competitionId: string,
		@Param('teamId') teamId: string,
		@Body('participantId') participantId: string
	) {
		return this.gameService.selectPlayer(competitionId, teamId, participantId)
	}

	/**
	 * üöÄ –ó–∞–ø—É—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
	 */
	@Post('competitions/:competitionId/start')
	@UseGuards(JwtAuthGuard)
	async startCompetition(
		@Param('competitionId') competitionId: string,
		@Request() req
	) {
		const userId = req.user.id
		return this.gameService.startCompetition(competitionId, userId)
	}

	/**
	 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏
	 */
	@Get('competitions/:competitionId')
	async getCompetition(
		@Param('competitionId') competitionId: string,
		@Query('userId') userId?: string
	) {
		return this.gameService.getCompetition(competitionId, userId)
	}

	/**
	 * üèÜ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
	 */
	@Get('competitions/:competitionId/leaderboard')
	async getLeaderboard(@Param('competitionId') competitionId: string) {
		return this.gameService.getLeaderboard(competitionId)
	}

	/**
	 * üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
	 */
	@Get('competitions/:competitionId/teams/:teamId/chat')
	async getTeamChat(
		@Param('competitionId') competitionId: string,
		@Param('teamId') teamId: string,
		@Query('participantId') participantId: string
	) {
		return this.gameService.getTeamChat(competitionId, teamId, participantId)
	}

	/**
	 * üîç –ü–æ–∏—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–¥—É
	 */
	@Get('competitions/code/:code')
	async findByCode(@Param('code') code: string) {
		return this.gameService.findCompetitionByCode(code)
	}

	// =================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===================

	/**
	 * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
	 */
	@Get('competitions/:competitionId/question')
	async getCurrentQuestion(
		@Param('competitionId') competitionId: string,
		@Query('participantId') participantId: string
	) {
		return this.gameService.getCurrentQuestion(participantId)
	}

	/**
	 * ‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
	 */
	@Post('competitions/:competitionId/answer')
	async submitAnswer(
		@Param('competitionId') competitionId: string,
		@Body() dto: {
			participantId: string
			questionId: string
			selectedAnswers?: string[]
			userAnswer?: string
		}
	) {
		return this.gameService.submitAnswer(
			dto.participantId,
			dto.questionId,
			{
				selectedAnswers: dto.selectedAnswers,
				userAnswer: dto.userAnswer
			}
		)
	}

	/**
	 * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–º–∞–Ω–¥—ã
	 */
	@Get('competitions/:competitionId/progress')
	async getTeamProgress(
		@Param('competitionId') competitionId: string,
		@Query('participantId') participantId: string
	) {
		return this.gameService.getTeamProgress(participantId)
	}
} 