import { CompetitionStatus } from '@prisma/client'
import { Transform } from 'class-transformer'
import { IsInt, IsOptional, IsString, Max, Min } from 'class-validator'

// üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
export class CreateCompetitionDto {
	@IsString()
	testId: string

	@IsOptional()
	@IsString()
	title?: string

	@IsInt()
	@Min(2)
	@Max(10)
	@Transform(({ value }) => parseInt(value))
	maxTeams: number
}

// üéÆ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é
export class JoinCompetitionDto {
	@IsString()
	code: string

	@IsString()
	displayName: string

	@IsOptional()
	@IsString()
	userId?: string
}

// üë• –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
export class SelectTeamDto {
	@IsString()
	competitionId: string

	@IsString()
	teamId: string

	@IsString()
	participantId: string
}

// üéØ –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
export class SelectPlayerDto {
	@IsString()
	competitionId: string

	@IsString()
	teamId: string

	@IsString()
	participantId: string
}

// üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã
export class TeamChatMessageDto {
	@IsString()
	competitionId: string

	@IsString()
	teamId: string

	@IsString()
	message: string

	@IsString()
	participantId: string
}

// üìä Response interfaces
export interface CompetitionResponse {
	id: string
	code: string
	title: string
	status: CompetitionStatus
	maxTeams: number
	testTitle: string
	creatorName: string
	teams: TeamResponse[]
	participants: ParticipantResponse[]
	canStart: boolean
	isCreator: boolean
	userParticipation?: ParticipantResponse
}

export interface TeamResponse {
	id: string
	name: string
	color: string
	participantCount: number
	participants: ParticipantResponse[]
	selectedPlayer?: ParticipantResponse
	score: number
	position?: number | null
}

export interface ParticipantResponse {
	id: string
	displayName: string
	isGuest: boolean
	isReady: boolean
	teamName?: string
	teamColor?: string
	isSelected: boolean
	joinedAt: string
}

export interface LeaderboardResponse {
	competition: {
		id: string
		title: string
		testTitle: string
		status: CompetitionStatus
		startedAt?: string
		endedAt?: string
	}
	teams: LeaderboardTeam[]
	totalParticipants: number
}

export interface LeaderboardTeam {
	position: number
	team: {
		id: string
		name: string
		color: string
	}
	score: number
	participants: {
		id: string
		displayName: string
		isGuest: boolean
	}[]
	completionTime?: number
	correctAnswers: number
	totalQuestions: number
}

export interface ChatMessage {
	id: string
	participantName: string
	message: string
	timestamp: string
	isOwn: boolean
}

// üìù DTO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
export class SubmitAnswerDto {
	@IsString()
	participantId: string

	@IsString()
	questionId: string

	@IsOptional()
	selectedAnswers?: string[]

	@IsOptional()
	@IsString()
	userAnswer?: string
}

// üéØ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export interface QuestionResponse {
	id: string
	number: number
	title: string
	type: string
	options?: string[]
	hasImage: boolean
	imageUrl?: string
	weight: number
	totalQuestions: number
	answeredCount: number
}

export interface AnswerResult {
	success: boolean
	isCorrect?: boolean
	nextQuestionId?: string
	isTestCompleted: boolean
	currentScore?: number
	message: string
}

export interface TeamProgress {
	totalQuestions: number
	answeredCount: number
	correctCount: number
	timeElapsed: number
	currentScore: number
	isCompleted: boolean
	canAnswer: boolean
	isObserver: boolean
}

// üí¨ –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —á–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
export interface TeamChatMessage {
	id: string
	participantId: string
	participantName: string
	message: string
	timestamp: string
	isOwn: boolean
}

export interface TeamChatResponse {
	teamId: string
	teamName: string
	teamColor: string
	messages: TeamChatMessage[]
	canSendMessages: boolean
}

// üë• –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è real-time –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
export interface CreatorDashboardParticipant {
	id: string
	displayName: string
	isGuest: boolean
	isOnline: boolean
	joinedAt: string
	teamInfo?: {
		id: string
		name: string
		color: string
		isSelected: boolean // –≤—ã–±—Ä–∞–Ω –ª–∏ –∫–∞–∫ –∏–≥—Ä–æ–∫ –∫–æ–º–∞–Ω–¥—ã
	}
	status: 'waiting' | 'in_team' | 'selected_player' | 'disconnected'
}

export interface CreatorDashboardTeam {
	id: string
	name: string
	color: string
	participantCount: number
	participants: CreatorDashboardParticipant[]
	selectedPlayer?: CreatorDashboardParticipant
	hasSelectedPlayer: boolean
	isReady: boolean // –≥–æ—Ç–æ–≤–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∫ –Ω–∞—á–∞–ª—É
}

export interface CreatorDashboardResponse {
	competition: {
		id: string
		code: string
		title: string
		status: CompetitionStatus
		testTitle: string
		maxTeams: number
		canStart: boolean
		totalParticipants: number
		onlineParticipants: number
	}
	teams: CreatorDashboardTeam[]
	unassignedParticipants: CreatorDashboardParticipant[]
	recentActivity: {
		type: 'participant_joined' | 'participant_left' | 'team_selected' | 'player_selected'
		participantName: string
		teamName?: string
		timestamp: string
	}[]
} 