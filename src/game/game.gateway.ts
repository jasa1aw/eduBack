import {
  WebSocketGateway,
  SubscribeMessage,
  WebSocketServer,
  OnGatewayConnection,
  OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { GameService } from './game.service';

@WebSocketGateway(
  { cors: { origin: '*' } }) // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–æ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
export class GameGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  constructor(private readonly gameService: GameService) {}

  // üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  async handleConnection(client: Socket) {
    try {
      console.log(`‚úÖ –ò–≥—Ä–æ–∫ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${client.id}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      client.disconnect();
    }
  }
  

  // üìå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
  async handleDisconnect(client: Socket) {
    console.log(`–ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${client.id}`);
  }

  // üìå –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ
  @SubscribeMessage('joinGame')
  async joinGame(client: Socket, gameId: string) {
    client.join(gameId);
    console.log(`–ò–≥—Ä–æ–∫ ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameId}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    const players = await this.gameService.getPlayers(gameId);
    this.server.to(gameId).emit('playersUpdated', players);
  }

  // üìå –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
  @SubscribeMessage('sendMessage')
  async sendMessage(client: Socket, payload: { gameId: string; message: string; userId: string }) {
    this.server.to(payload.gameId).emit('newMessage', {
      userId: payload.userId,
      message: payload.message,
      timestamp: new Date(),
    });
  }
}
