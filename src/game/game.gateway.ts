import {
  ConnectedSocket,
  MessageBody,
  OnGatewayConnection,
  OnGatewayDisconnect,
  SubscribeMessage,
  WebSocketGateway,
  WebSocketServer,
} from '@nestjs/websockets'
import { Server, Socket } from 'socket.io'
import { GameService } from './game.service'

interface AuthenticatedSocket extends Socket {
  userId?: string
  participantId?: string
  competitionId?: string
}

@WebSocketGateway({ cors: { origin: '*' } })
export class GameGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server

  constructor(
    private readonly gameService: GameService
  ) { }

  // =================== –ë–ê–ó–û–í–´–ï –°–û–ë–´–¢–ò–Ø ===================

  /**
   * üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async handleConnection(client: AuthenticatedSocket) {
    try {
      console.log(`üéÆ Client connected: ${client.id}`)
    } catch (error) {
      console.error('‚ùå Connection error:', error)
      client.disconnect()
    }
  }

  /**
   * üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async handleDisconnect(client: AuthenticatedSocket) {
    if (client.competitionId) {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      client.to(`competition:${client.competitionId}`).emit('participantDisconnected', {
        participantId: client.participantId
      })
    }
    console.log(`üéÆ Client disconnected: ${client.id}`)
  }

  // =================== –û–ë–´–ß–ù–´–ï –ò–ì–†–´ ===================

  /**
   * üìå –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∏–≥—Ä–µ
   */
  @SubscribeMessage('joinGame')
  async joinGame(client: Socket, gameId: string) {
    client.join(gameId)
    console.log(`–ò–≥—Ä–æ–∫ ${client.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameId}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
    const players = await this.gameService.getPlayers(gameId)
    this.server.to(gameId).emit('playersUpdated', players)
  }

  /**
   * üìå –ò–≥—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
   */
  @SubscribeMessage('sendMessage')
  async sendMessage(client: Socket, payload: { gameId: string; message: string; userId: string }) {
    this.server.to(payload.gameId).emit('newMessage', {
      userId: payload.userId,
      message: payload.message,
      timestamp: new Date(),
    })
  }

  // =================== –°–û–†–ï–í–ù–û–í–ê–ù–ò–Ø ===================

  /**
   * üèÜ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—é
   */
  @SubscribeMessage('joinCompetition')
  async handleJoinCompetition(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string; participantId: string }
  ) {
    try {
      const { competitionId, participantId } = payload

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
      client.competitionId = competitionId
      client.participantId = participantId

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      await client.join(`competition:${competitionId}`)

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      const competition = await this.gameService.getCompetition(competitionId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è –∫–ª–∏–µ–Ω—Ç—É
      client.emit('competitionJoined', { competition })

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–≤–∫–ª—é—á–∞—è —Å–æ–∑–¥–∞—Ç–µ–ª—è)
      client.to(`competition:${competitionId}`).emit('participantJoined', {
        participant: competition.participants.find(p => p.id === participantId)
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      await this.broadcastCompetitionUpdate(competitionId)

      console.log(`üë§ Participant ${participantId} joined competition ${competitionId}`)
    } catch (error) {
      console.error('Error joining competition:', error)
      client.emit('error', { message: 'Failed to join competition' })
    }
  }

  /**
   * üë• –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
   */
  @SubscribeMessage('selectTeam')
  async handleSelectTeam(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string; teamId: string; participantId: string }
  ) {
    try {
      const { competitionId, teamId, participantId } = payload

      // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
      const competition = await this.gameService.selectTeam(
        competitionId,
        teamId,
        participantId
      )

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã
      await client.join(`team:${teamId}`)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
      this.server.to(`competition:${competitionId}`).emit('competitionUpdated', {
        competition
      })

      console.log(`üë• Participant ${participantId} selected team ${teamId}`)
    } catch (error) {
      console.error('Error selecting team:', error)
      client.emit('error', { message: 'Failed to select team' })
    }
  }

  /**
   * üéØ –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  @SubscribeMessage('selectPlayer')
  async handleSelectPlayer(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string; teamId: string; selectedPlayerId: string }
  ) {
    try {
      const { competitionId, teamId, selectedPlayerId } = payload

      // –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–∞
      const competition = await this.gameService.selectPlayer(
        competitionId,
        teamId,
        selectedPlayerId
      )

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
      this.server.to(`competition:${competitionId}`).emit('competitionUpdated', {
        competition
      })

      console.log(`üéØ Player ${selectedPlayerId} selected for team ${teamId}`)
    } catch (error) {
      console.error('Error selecting player:', error)
      client.emit('error', { message: 'Failed to select player' })
    }
  }

  /**
   * üöÄ –ó–∞–ø—É—Å–∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
   */
  @SubscribeMessage('startCompetition')
  async handleStartCompetition(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string; userId: string }
  ) {
    try {
      const { competitionId, userId } = payload

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ
      const competition = await this.gameService.startCompetition(competitionId, userId)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      this.server.to(`competition:${competitionId}`).emit('competitionStarted', {
        competition
      })

      console.log(`üöÄ Competition ${competitionId} started by ${userId}`)
    } catch (error) {
      console.error('Error starting competition:', error)
      client.emit('error', { message: 'Failed to start competition' })
    }
  }

  /**
   * üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã
   */
  @SubscribeMessage('teamChat')
  async handleTeamChat(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string; teamId: string; message: string; participantId: string }
  ) {
    try {
      const { competitionId, teamId, message, participantId } = payload

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.gameService.sendTeamMessage(
        competitionId,
        teamId,
        participantId,
        message
      )

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const competition = await this.gameService.getCompetition(competitionId)
      const participant = competition.participants.find(p => p.id === participantId)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã
      this.server.to(`team:${teamId}`).emit('teamMessage', {
        id: Date.now().toString(),
        participantName: participant?.displayName || 'Unknown',
        message,
        timestamp: new Date().toISOString(),
        isOwn: false
      })

      console.log(`üí¨ Message sent to team ${teamId} by ${participantId}`)
    } catch (error) {
      console.error('Error sending team message:', error)
      client.emit('error', { message: 'Failed to send message' })
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
   */
  @SubscribeMessage('getLeaderboard')
  async handleGetLeaderboard(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { competitionId: string }
  ) {
    try {
      const { competitionId } = payload

      const leaderboard = await this.gameService.getLeaderboard(competitionId)

      client.emit('leaderboardUpdated', { leaderboard })
    } catch (error) {
      console.error('Error getting leaderboard:', error)
      client.emit('error', { message: 'Failed to get leaderboard' })
    }
  }

  // =================== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ===================

  /**
   * üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   */
  @SubscribeMessage('getCurrentQuestion')
  async handleGetCurrentQuestion(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { participantId: string }
  ) {
    try {
      const question = await this.gameService.getCurrentQuestion(payload.participantId)
      client.emit('currentQuestion', { question })
    } catch (error) {
      console.error('Error getting current question:', error)
      client.emit('error', { message: 'Failed to get current question' })
    }
  }

  /**
   * ‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
   */
  @SubscribeMessage('submitAnswer')
  async handleSubmitAnswer(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: {
      participantId: string
      questionId: string
      selectedAnswers?: string[]
      userAnswer?: string
    }
  ) {
    try {
      const result = await this.gameService.submitAnswer(
        payload.participantId,
        payload.questionId,
        {
          selectedAnswers: payload.selectedAnswers,
          userAnswer: payload.userAnswer
        }
      )

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
      client.emit('answerResult', result)

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (result.nextQuestionId) {
        const nextQuestion = await this.gameService.getCurrentQuestion(payload.participantId)
        client.emit('currentQuestion', { question: nextQuestion })
      }

      // –ï—Å–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
      if (result.isTestCompleted && client.competitionId) {
        await this.broadcastLeaderboardUpdate(client.competitionId)
      }
    } catch (error) {
      console.error('Error submitting answer:', error)
      client.emit('error', { message: 'Failed to submit answer' })
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  @SubscribeMessage('getTeamProgress')
  async handleGetTeamProgress(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() payload: { participantId: string }
  ) {
    try {
      const progress = await this.gameService.getTeamProgress(payload.participantId)
      client.emit('teamProgress', { progress })
    } catch (error) {
      console.error('Error getting team progress:', error)
      client.emit('error', { message: 'Failed to get team progress' })
    }
  }

  // =================== UTILITY METHODS ===================

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
   */
  async broadcastCompetitionUpdate(competitionId: string) {
    try {
      const competition = await this.gameService.getCompetition(competitionId)

      this.server.to(`competition:${competitionId}`).emit('competitionUpdated', {
        competition
      })
    } catch (error) {
      console.error('Error broadcasting competition update:', error)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
   */
  async broadcastLeaderboardUpdate(competitionId: string) {
    try {
      const leaderboard = await this.gameService.getLeaderboard(competitionId)

      this.server.to(`competition:${competitionId}`).emit('leaderboardUpdated', {
        leaderboard
      })
    } catch (error) {
      console.error('Error broadcasting leaderboard update:', error)
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
   */
  async notifyCompetitionCompleted(competitionId: string) {
    try {
      const leaderboard = await this.gameService.getLeaderboard(competitionId)

      this.server.to(`competition:${competitionId}`).emit('competitionCompleted', {
        leaderboard
      })
    } catch (error) {
      console.error('Error notifying competition completion:', error)
    }
  }
}
