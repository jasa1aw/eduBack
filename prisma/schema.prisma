generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ User model
model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  name               String?
  role               Role                @default(STUDENT)
  password           String
  isVerified         Boolean             @default(false)
  verifyCode         String?
  tests              Test[]
  results            Result[]
  attempts           Attempt[]
  createdGames       Game[]              @relation("creator")
  playingGames       Game[]              @relation("players")
  invites            Invite[]            @relation("UserInvites") // ‚úÖ –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Å–≤—è–∑–∏
  messages           Message[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emailVerifications EmailVerification[]
}

// üé≠ Role enum
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// üìù Test model
model Test {
  id          String     @id @default(uuid())
  title       String     @default("New test")
  isDraft     Boolean    @default(true) // ‚Üê —ç—Ç–æ –≤–∞–∂–Ω–æ
  creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId   String
  questions   Question[]
  results     Result[]
  attempts    Attempt[]
  maxAttempts Int?       @default(1)
  showAnswers Boolean    @default(false)
  createdAt   DateTime   @default(now())
}

// ‚ùì Question model
model Question {
  id             String          @id @default(uuid())
  test           Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId         String
  title          String          @default("New question")
  type           QuestionType
  options        String[]
  correctAnswers String[]
  explanation    String?
  image          String?
  weight         Int?            @default(1)
  timeLimit      Int             @default(10)
  attemptAnswers AttemptAnswer[]
}

// üî† QuestionType enum
enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  OPEN_QUESTION
  TRUE_FALSE
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  TIMEOUT
}

// üèÅ Attempt ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
model Attempt {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  test      Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  startTime DateTime        @default(now())
  endTime   DateTime?
  status    AttemptStatus   @default(IN_PROGRESS)
  answers   AttemptAnswer[]
  results   Result[]
  progress  Json            @default("{}")
}

enum AnswerStatus {
  PENDING // –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
  CHECKED // –ü—Ä–æ–≤–µ—Ä–µ–Ω
}

// üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ø—ã—Ç–∫–µ
model AttemptAnswer {
  id              String       @id @default(uuid())
  attempt         Attempt      @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId       String
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  selectedAnswers String[] // –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
  userAnswer      String? // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  isCorrect       Boolean?
  status          AnswerStatus @default(PENDING)
}

// üìä –°—Ç–∞—Ç—É—Å—ã –ø–æ–ø—ã—Ç–∫–∏

// üìà Result model
model Result {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  test      Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  attempt   Attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade) // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø–æ–ø—ã—Ç–∫–æ–π
  attemptId String
  score     Int
}

// üéÆ Game model
model Game {
  id        String   @id @default(uuid())
  creator   User     @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  isPublic  Boolean  @default(false)
  players   User[]   @relation("players")
  chat      Chat?
  invites   Invite[] @relation("GameInvites") // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  createdAt DateTime @default(now())
}

// üí¨ Chat model
model Chat {
  id       String    @id @default(uuid())
  game     Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String    @unique
  messages Message[]
}

// üì® Message model
model Message {
  id         String   @id @default(uuid())
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  content    String
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// üì© Invite model
model Invite {
  id     String       @id @default(uuid())
  game   Game         @relation("GameInvites", fields: [gameId], references: [id], onDelete: Cascade) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  gameId String
  email  String?
  token  String       @unique
  user   User?        @relation("UserInvites", fields: [userId], references: [id], onDelete: Cascade) // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
  userId String?
  status InviteStatus @default(PENDING)
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
