generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// üë§ User model
model User {
  id                        String                   @id @default(uuid())
  email                     String                   @unique
  name                      String?
  role                      Role                     @default(STUDENT)
  password                  String
  isVerified                Boolean                  @default(false)
  verifyCode                String?
  tests                     Test[]
  results                   Result[]
  attempts                  Attempt[]
  createdGames              Game[]                   @relation("creator")
  playingGames              Game[]                   @relation("players")
  createdCompetitions       Competition[]
  competitionParticipations CompetitionParticipant[]
  invites                   Invite[]                 @relation("UserInvites")
  messages                  Message[]
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  emailVerifications        EmailVerification[]
}

// üé≠ Role enum
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// üìù Test model
model Test {
  id           String        @id @default(uuid())
  title        String        @default("New test")
  isDraft      Boolean       @default(true)
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  questions    Question[]
  results      Result[]
  attempts     Attempt[]
  competitions Competition[]
  timeLimit    Int           @default(10)
  maxAttempts  Int?          @default(1)
  showAnswers  Boolean       @default(false)
  examMode     Boolean       @default(false)
  createdAt    DateTime      @default(now())
}

// ‚ùì Question model
model Question {
  id             String          @id @default(uuid())
  test           Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId         String
  title          String          @default("New question")
  type           QuestionType
  options        String[]
  correctAnswers String[]
  explanation    String?
  image          String?
  weight         Int?            @default(1)
  attemptAnswers AttemptAnswer[]
}

// üî† QuestionType enum
enum QuestionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  OPEN_QUESTION
  TRUE_FALSE
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  TIMEOUT
}

enum AttemptMode {
  PRACTICE
  EXAM
}

// üèÅ Attempt ‚Äî –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
model Attempt {
  id        String          @id @default(uuid())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  test      Test            @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  team      Team?
  startTime DateTime        @default(now())
  endTime   DateTime?
  status    AttemptStatus   @default(IN_PROGRESS)
  mode      AttemptMode     @default(PRACTICE)
  answers   AttemptAnswer[]
  results   Result[]
  progress  Json            @default("{}")
}

enum AnswerStatus {
  PENDING
  CHECKED
}

// üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–ø—ã—Ç–∫–µ
model AttemptAnswer {
  id              String       @id @default(uuid())
  attempt         Attempt      @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId       String
  question        Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId      String
  selectedAnswers String[]
  userAnswer      String?
  isCorrect       Boolean?
  status          AnswerStatus @default(PENDING)
}

// üìà Result model
model Result {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  test      Test    @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId    String
  attempt   Attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId String
  score     Int
}

// üèÜ Competition model
model Competition {
  id           String                   @id @default(uuid())
  code         String                   @unique
  title        String                   @default("Team Competition")
  test         Test                     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId       String
  creator      User                     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  status       CompetitionStatus        @default(WAITING)
  maxTeams     Int                      @default(2)
  teams        Team[]
  participants CompetitionParticipant[]
  startedAt    DateTime?
  endedAt      DateTime?
  createdAt    DateTime                 @default(now())
}

enum CompetitionStatus {
  WAITING
  STARTING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// üë• Team model
model Team {
  id               String                   @id @default(uuid())
  name             String
  color            String
  competition      Competition              @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId    String
  participants     CompetitionParticipant[]
  selectedPlayer   CompetitionParticipant?  @relation("SelectedPlayer", fields: [selectedPlayerId], references: [id])
  selectedPlayerId String?                  @unique
  attempt          Attempt?                 @relation(fields: [attemptId], references: [id])
  attemptId        String?                  @unique
  score            Int                      @default(0)
  position         Int?
  chatMessages     TeamChatMessage[]
  createdAt        DateTime                 @default(now())
}

// üéÆ Competition Participant
model CompetitionParticipant {
  id              String            @id @default(uuid())
  competition     Competition       @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  competitionId   String
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          String?
  displayName     String
  isGuest         Boolean           @default(false)
  team            Team?             @relation(fields: [teamId], references: [id], onDelete: SetNull)
  teamId          String?
  selectedForTeam Team?             @relation("SelectedPlayer")
  isReady         Boolean           @default(false)
  chatMessages    TeamChatMessage[]
  joinedAt        DateTime          @default(now())

  @@unique([competitionId, userId])
}

// üí¨ Team Chat Messages
model TeamChatMessage {
  id            String                 @id @default(uuid())
  team          Team                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId        String
  participant   CompetitionParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String
  message       String
  createdAt     DateTime               @default(now())
}

// üéÆ Game model
model Game {
  id        String   @id @default(uuid())
  creator   User     @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  isPublic  Boolean  @default(false)
  players   User[]   @relation("players")
  chat      Chat?
  invites   Invite[] @relation("GameInvites")
  createdAt DateTime @default(now())
}

// üí¨ Chat model
model Chat {
  id       String    @id @default(uuid())
  game     Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId   String    @unique
  messages Message[]
}

// üì® Message model
model Message {
  id         String   @id @default(uuid())
  chat       Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId     String
  sender     User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  content    String
  readStatus Boolean  @default(false)
  createdAt  DateTime @default(now())
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

// üì© Invite model
model Invite {
  id     String       @id @default(uuid())
  game   Game         @relation("GameInvites", fields: [gameId], references: [id], onDelete: Cascade)
  gameId String
  email  String?
  token  String       @unique
  user   User?        @relation("UserInvites", fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  status InviteStatus @default(PENDING)
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
